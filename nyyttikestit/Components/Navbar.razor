<nav class="navbar navbar-expand-lg navbar-white bg-orange">
    <div class="container">
        <a class="navbar-brand" href="/"><img src="../sample-data/Logo.png" height="50" /></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse fs-5" id="navbarNavDropdown">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link mx-3 navlink-hover @(IsPageActive(HomePageUri) ? "active" : string.Empty)" href="@HomePageUri">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link mx-3 navlink-hover @(IsPageActive(InfoPageUri) ? "active" : string.Empty)" href="@InfoPageUri">Info</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link mx-3 dropdown-toggle navlink-hover" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Reseptejä
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="https://chocochili.net/" target="_blank">Chocochili</a></li>
                        <li><a class="dropdown-item" href="https://www.lidl-reseptit.fi/" target="_blank">Lidl</a></li>
                        <li><a class="dropdown-item" href="https://yhteishyva.fi/ruoka" target="_blank">Yhteishyvä</a></li>

                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code
{
    // Public and CamelCase because C# properties are methods
    [Inject] public NavigationManager NavigationManager { get; set; }

    private const string HomePageUri = "/";
    private const string InfoPageUri = "/info";


    private bool IsPageActive(string pageToCheckUri)
    {
        //Skip(3) to remove http://domainname/
        string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(3).ToArray();

        if (pageToCheckUri == HomePageUri)
        {
            if (currentUriSplitBetweenSlashes.Last().Length == 0)
            {
                return true;
            }
        }
        else
        {
            string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();

            foreach (string currentUriPart in currentUriSplitBetweenSlashes)
            {
                foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
                {
                    if (pageToCheckUriPart == currentUriPart)
                    {
                        return true;
                    }
                }
            }
        }

        //if the code gets here pageToCheckUri is not the active page. so return false.
        return false;
    }
}
