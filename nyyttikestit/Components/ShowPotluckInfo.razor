@inject HttpClient Http
@inject IJSRuntime JsRuntime


<div class="card text-center" style="background-color: rgba(255,255,255,0.9)">
    <div class="card-body">
        <div>
            <p class="card-title fs-5">@potluck.Name</p>
        </div>
        <div>
            <p class="card-text">Kestin kuvaus: @potluck.Description</p>
            <p>Kestin tapahtumapaikka: @potluck.Location ja aika @potluck.Date.ToString("dd.MM.yyyy HH:mm")</p>
            <h6 class="card-subtitle mb-2">
                Tämän kestin liittymiskoodi on @Guid <button id="copyGuid" @onclick=@CopyToClipboard class="btn"><i class="fa fa-copy fas" aria-hidden="true" style="color:darkorange;"></i></button>
            </h6>
            <div>
                <button class="button button-update" @onclick=@(()=>{EditDialogIsOpen=true;})><i class="fa fa-edit"></i> Muokkaa</button>
            </div>
        </div>
    </div>

    @if (EditDialogIsOpen)
    {
        <EditPotluck1 EditPotluck="@potluck"
                  OnClose="@OnEditDialogClose">
        </EditPotluck1>
    }

</div>

@code {
    [Parameter] public string Guid { get; set; }
    [Parameter] public bool OnEditPotluck { get; set; }
    public Potluck potluck = new Potluck();
    public bool EditDialogIsOpen = false;
    //public string InfoDate = string.Empty;
    //public string InfoTime = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        potluck = await Http.GetFromJsonAsync<Potluck>($"{APIEndpoints.s_Potlucks}/getpotluck/{Guid}");
        //InfoDate = potluck.Date.Date.ToString();
    }
    private async Task CopyToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Guid);
    }

    public void OnEditDialogClose(){
        EditDialogIsOpen = false;
    }
}
